import { AccountFilter, AccountInfo, Logger, PerformanceCallbackFunction } from "@azure/msal-common";
import { RedirectRequest } from "@azure/msal-browser/src/request/RedirectRequest";
import { PopupRequest } from "@azure/msal-browser/src/request/PopupRequest";
import { SilentRequest } from "@azure/msal-browser/src/request/SilentRequest";
import { SsoSilentRequest } from "@azure/msal-browser/src/request/SsoSilentRequest";
import { EndSessionRequest } from "@azure/msal-browser/src/request/EndSessionRequest";
import { WrapperSKU } from "@azure/msal-browser/src/utils/BrowserConstants";
import { INavigationClient } from "@azure/msal-browser/src/navigation/INavigationClient";
import { EndSessionPopupRequest } from "@azure/msal-browser/src/request/EndSessionPopupRequest";
import { ITokenCache } from "@azure/msal-browser/src/cache/ITokenCache";
import { AuthorizationCodeRequest } from "@azure/msal-browser/src/request/AuthorizationCodeRequest";
import { BrowserConfiguration } from "@azure/msal-browser/src/config/Configuration";
import { AuthenticationResult } from "@azure/msal-browser/src/response/AuthenticationResult";
import { EventCallbackFunction } from "@azure/msal-browser/src/event/EventMessage";
import { ClearCacheRequest } from "@azure/msal-browser/src/request/ClearCacheRequest";
export interface IPublicClientApplication {
    initialize(): Promise<void>;
    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;
    acquireTokenRedirect(request: RedirectRequest): Promise<void>;
    acquireTokenSilent(silentRequest: SilentRequest): Promise<AuthenticationResult>;
    acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult>;
    addEventCallback(callback: EventCallbackFunction): string | null;
    removeEventCallback(callbackId: string): void;
    addPerformanceCallback(callback: PerformanceCallbackFunction): string;
    removePerformanceCallback(callbackId: string): boolean;
    enableAccountStorageEvents(): void;
    disableAccountStorageEvents(): void;
    getAccount(accountFilter: AccountFilter): AccountInfo | null;
    getAccountByHomeId(homeAccountId: string): AccountInfo | null;
    getAccountByLocalId(localId: string): AccountInfo | null;
    getAccountByUsername(userName: string): AccountInfo | null;
    getAllAccounts(): AccountInfo[];
    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;
    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;
    loginRedirect(request?: RedirectRequest): Promise<void>;
    logout(logoutRequest?: EndSessionRequest): Promise<void>;
    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;
    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;
    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;
    getTokenCache(): ITokenCache;
    getLogger(): Logger;
    setLogger(logger: Logger): void;
    setActiveAccount(account: AccountInfo | null): void;
    getActiveAccount(): AccountInfo | null;
    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;
    setNavigationClient(navigationClient: INavigationClient): void;
    /** @internal */
    getConfiguration(): BrowserConfiguration;
    hydrateCache(result: AuthenticationResult, request: SilentRequest | SsoSilentRequest | RedirectRequest | PopupRequest): Promise<void>;
    clearCache(logoutRequest?: ClearCacheRequest): Promise<void>;
}
export declare const stubbedPublicClientApplication: IPublicClientApplication;
//# sourceMappingURL=IPublicClientApplication.d.ts.map