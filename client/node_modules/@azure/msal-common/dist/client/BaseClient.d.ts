import { ClientConfiguration, CommonClientConfiguration } from "@azure/msal-common/src/config/ClientConfiguration";
import { INetworkModule } from "@azure/msal-common/src/network/INetworkModule";
import { NetworkManager, NetworkResponse } from "@azure/msal-common/src/network/NetworkManager";
import { ICrypto } from "@azure/msal-common/src/crypto/ICrypto";
import { Authority } from "@azure/msal-common/src/authority/Authority";
import { Logger } from "@azure/msal-common/src/logger/Logger";
import { ServerAuthorizationTokenResponse } from "@azure/msal-common/src/response/ServerAuthorizationTokenResponse";
import { CacheManager } from "@azure/msal-common/src/cache/CacheManager";
import { ServerTelemetryManager } from "@azure/msal-common/src/telemetry/server/ServerTelemetryManager";
import { RequestThumbprint } from "@azure/msal-common/src/network/RequestThumbprint";
import { CcsCredential } from "@azure/msal-common/src/account/CcsCredential";
import { IPerformanceClient } from "@azure/msal-common/src/telemetry/performance/IPerformanceClient";
import { BaseAuthRequest } from "@azure/msal-common/src/request/BaseAuthRequest";
/**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 * @internal
 */
export declare abstract class BaseClient {
    logger: Logger;
    protected config: CommonClientConfiguration;
    protected cryptoUtils: ICrypto;
    protected cacheManager: CacheManager;
    protected networkClient: INetworkModule;
    protected serverTelemetryManager: ServerTelemetryManager | null;
    protected networkManager: NetworkManager;
    authority: Authority;
    protected performanceClient?: IPerformanceClient;
    protected constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);
    /**
     * Creates default headers for requests to token endpoint
     */
    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string>;
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */
    protected executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint, correlationId: string, queuedEvent?: string): Promise<NetworkResponse<ServerAuthorizationTokenResponse>>;
    /**
     * Updates the authority object of the client. Endpoint discovery must be completed.
     * @param updatedAuthority
     */
    updateAuthority(cloudInstanceHostname: string, correlationId: string): Promise<void>;
    /**
     * Creates query string for the /token request
     * @param request
     */
    createTokenQueryParameters(request: BaseAuthRequest): string;
}
//# sourceMappingURL=BaseClient.d.ts.map