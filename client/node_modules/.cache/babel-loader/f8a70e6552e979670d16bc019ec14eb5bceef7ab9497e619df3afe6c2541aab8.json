{"ast":null,"code":"import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n  \"image/upload\": \"images\",\n  \"image/private\": \"private_images\",\n  \"image/authenticated\": \"authenticated_images\",\n  \"raw/upload\": \"files\",\n  \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n  constructor(publicID) {\n    let cloudConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let urlConfig = arguments.length > 2 ? arguments[2] : undefined;\n    this.setPublicID(publicID);\n    this.setCloudConfig(cloudConfig);\n    this.setURLConfig(urlConfig);\n  }\n  /**\n   * @description Sets the URL Config for this asset\n   * @param urlConfig\n   * @return {this}\n   */\n  setURLConfig(urlConfig) {\n    this.urlConfig = new URLConfig(urlConfig);\n    return this;\n  }\n  /**\n   * @description Sets the Cloud Config for this asset\n   * @param urlConfig\n   * @return {this}\n   */\n  setCloudConfig(cloudConfig) {\n    this.cloudName = cloudConfig.cloudName;\n    this.apiKey = cloudConfig.apiKey;\n    this.apiSecret = cloudConfig.apiSecret;\n    this.authToken = cloudConfig.authToken;\n    return this;\n  }\n  /**\n   * @description Sets the public ID of the asset.\n   * @param {string} publicID The public ID of the asset.\n   * @return {this}\n   */\n  setPublicID(publicID) {\n    // PublicID must be a string!\n    this.publicID = publicID ? publicID.toString() : '';\n    return this;\n  }\n  /**\n   * @description Sets the delivery type of the asset.\n   * @param {DELIVERY_TYPE | string} newType The type of the asset.\n   * @return {this}\n   */\n  setDeliveryType(newType) {\n    this.deliveryType = newType;\n    return this;\n  }\n  /**\n   * @description Sets the URL SEO suffix of the asset.\n   * @param {string} newSuffix The SEO suffix.\n   * @return {this}\n   */\n  setSuffix(newSuffix) {\n    this.suffix = newSuffix;\n    return this;\n  }\n  /**\n   * @description Sets the signature of the asset.\n   * @param {string} signature The signature.\n   * @return {this}\n   */\n  setSignature(signature) {\n    this.signature = signature;\n    return this;\n  }\n  /**\n   * @description Sets the version of the asset.\n   * @param {string} newVersion The version of the asset.\n   * @return {this}\n   */\n  setVersion(newVersion) {\n    if (newVersion) {\n      this.version = newVersion;\n    }\n    return this;\n  }\n  /**\n   * @description Sets the asset type.\n   * @param {string} newType The type of the asset.\n   * @return {this}\n   */\n  setAssetType(newType) {\n    if (newType) {\n      this.assetType = newType;\n    }\n    return this;\n  }\n  sign() {\n    return this;\n  }\n  /**\n   * @description Serializes to URL string\n   * @param overwriteOptions\n   */\n  toURL() {\n    let overwriteOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n  }\n  /**\n   * @description Validate various options before attempting to create a URL\n   * The function will throw in case a violation\n   * @throws Validation errors\n   */\n  validateAssetForURLCreation() {\n    if (typeof this.cloudName === 'undefined') {\n      throw 'You must supply a cloudName when initializing the asset';\n    }\n    const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n    const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n    if (suffixContainsDot || suffixContainsSlash) {\n      throw '`suffix`` should not include . or /';\n    }\n  }\n  /**\n   * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n   * * image/upload -> images\n   * * video/upload -> videos\n   * If no match is found, return `{asset}/{delivery}`\n   */\n  getResourceType() {\n    const assetType = handleAssetType(this.assetType);\n    const deliveryType = handleDeliveryType(this.deliveryType);\n    const hasSuffix = !!this.suffix;\n    const regularSEOType = `${assetType}/${deliveryType}`;\n    const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n    const useRootPath = this.urlConfig.useRootPath;\n    const shorten = this.urlConfig.shorten;\n    // Quick exit incase of useRootPath\n    if (useRootPath) {\n      if (regularSEOType === 'image/upload') {\n        return ''; // For image/upload we're done, just return nothing\n      } else {\n        throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n      }\n    }\n    if (shorten && regularSEOType === 'image/upload') {\n      return 'iu';\n    }\n    if (hasSuffix) {\n      if (shortSEOType) {\n        return shortSEOType;\n      } else {\n        throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n      }\n    }\n    // If all else fails, return the regular image/upload combination (asset/delivery)\n    return regularSEOType;\n  }\n  getSignature() {\n    if (this.signature) {\n      return `s--${this.signature}--`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   *\n   * @description Creates a fully qualified CloudinaryURL\n   * @return {string} CloudinaryURL\n   * @throws Validation Errors\n   */\n  createCloudinaryURL(transformation, trackedAnalytics) {\n    // In accordance with the existing implementation, if no publicID exists we should return nothing.\n    if (!this.publicID) {\n      return '';\n    }\n    // Throws if some options are mis-configured\n    // See the function for more information on when it throws\n    this.validateAssetForURLCreation();\n    const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n    const transformationString = transformation ? transformation.toString() : '';\n    const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n    const publicID = this.publicID;\n    if (typeof transformation === 'string') {\n      const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID.replace(/,/g, '%2C'), this.suffix].filter(a => a).join('/');\n      return url;\n    } else {\n      // Avoid applying encodeURI on entire string in case where we have transformations with comma (i.e. f_auto,q_auto)\n      // Since encodeURI does not encode commas we replace commas *only* on the publicID\n      const safeURL = [encodeURI(prefix), this.getResourceType(), this.getSignature(), encodeURI(transformationString), version, encodeURI(publicID).replace(/,/g, '%2C'), this.suffix && encodeURI(this.suffix)].filter(a => a).join('/').replace(/\\?/g, '%3F').replace(/=/g, '%3D');\n      const shouldAddAnalytics = this.urlConfig.analytics !== false && !publicID.includes('?');\n      let queryParamsString = '';\n      if (typeof this.urlConfig.queryParams === 'object') {\n        try {\n          const queryParams = new URLSearchParams(this.urlConfig.queryParams);\n          if (shouldAddAnalytics) {\n            queryParams.set(\"_a\", getSDKAnalyticsSignature(trackedAnalytics));\n          }\n          queryParamsString = queryParams.toString();\n        } catch (err) {\n          console.error('Error: URLSearchParams is not available so the queryParams object cannot be parsed, please try passing as an already parsed string');\n        }\n      } else {\n        queryParamsString = this.urlConfig.queryParams || '';\n        if (shouldAddAnalytics) {\n          queryParamsString += `${queryParamsString.length > 0 ? '&' : ''}_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n        }\n      }\n      if (queryParamsString) {\n        return `${safeURL}?${queryParamsString}`;\n      } else {\n        return safeURL;\n      }\n    }\n  }\n}\nexport { CloudinaryFile };","map":{"version":3,"names":["getUrlPrefix","getUrlVersion","handleAssetType","handleDeliveryType","URLConfig","getSDKAnalyticsSignature","SEO_TYPES","CloudinaryFile","constructor","publicID","cloudConfig","arguments","length","undefined","urlConfig","setPublicID","setCloudConfig","setURLConfig","cloudName","apiKey","apiSecret","authToken","toString","setDeliveryType","newType","deliveryType","setSuffix","newSuffix","suffix","setSignature","signature","setVersion","newVersion","version","setAssetType","assetType","sign","toURL","overwriteOptions","createCloudinaryURL","trackedAnalytics","validateAssetForURLCreation","suffixContainsDot","indexOf","suffixContainsSlash","getResourceType","hasSuffix","regularSEOType","shortSEOType","useRootPath","shorten","Error","Object","keys","join","getSignature","transformation","prefix","transformationString","forceVersion","url","replace","filter","a","safeURL","encodeURI","shouldAddAnalytics","analytics","includes","queryParamsString","queryParams","URLSearchParams","set","err","console","error"],"sources":["/Users/aniket/Desktop/chat-app-master/Chat App/client/node_modules/@cloudinary/url-gen/assets/CloudinaryFile.js"],"sourcesContent":["import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n    \"image/upload\": \"images\",\n    \"image/private\": \"private_images\",\n    \"image/authenticated\": \"authenticated_images\",\n    \"raw/upload\": \"files\",\n    \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n    constructor(publicID, cloudConfig = {}, urlConfig) {\n        this.setPublicID(publicID);\n        this.setCloudConfig(cloudConfig);\n        this.setURLConfig(urlConfig);\n    }\n    /**\n     * @description Sets the URL Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setURLConfig(urlConfig) {\n        this.urlConfig = new URLConfig(urlConfig);\n        return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setCloudConfig(cloudConfig) {\n        this.cloudName = cloudConfig.cloudName;\n        this.apiKey = cloudConfig.apiKey;\n        this.apiSecret = cloudConfig.apiSecret;\n        this.authToken = cloudConfig.authToken;\n        return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n    setPublicID(publicID) {\n        // PublicID must be a string!\n        this.publicID = publicID ? publicID.toString() : '';\n        return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n    setDeliveryType(newType) {\n        this.deliveryType = newType;\n        return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n    setSuffix(newSuffix) {\n        this.suffix = newSuffix;\n        return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n    setSignature(signature) {\n        this.signature = signature;\n        return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n    setVersion(newVersion) {\n        if (newVersion) {\n            this.version = newVersion;\n        }\n        return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n    setAssetType(newType) {\n        if (newType) {\n            this.assetType = newType;\n        }\n        return this;\n    }\n    sign() {\n        return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n    validateAssetForURLCreation() {\n        if (typeof this.cloudName === 'undefined') {\n            throw 'You must supply a cloudName when initializing the asset';\n        }\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n        if (suffixContainsDot || suffixContainsSlash) {\n            throw '`suffix`` should not include . or /';\n        }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n    getResourceType() {\n        const assetType = handleAssetType(this.assetType);\n        const deliveryType = handleDeliveryType(this.deliveryType);\n        const hasSuffix = !!this.suffix;\n        const regularSEOType = `${assetType}/${deliveryType}`;\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n        const useRootPath = this.urlConfig.useRootPath;\n        const shorten = this.urlConfig.shorten;\n        // Quick exit incase of useRootPath\n        if (useRootPath) {\n            if (regularSEOType === 'image/upload') {\n                return ''; // For image/upload we're done, just return nothing\n            }\n            else {\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n            }\n        }\n        if (shorten && regularSEOType === 'image/upload') {\n            return 'iu';\n        }\n        if (hasSuffix) {\n            if (shortSEOType) {\n                return shortSEOType;\n            }\n            else {\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n            }\n        }\n        // If all else fails, return the regular image/upload combination (asset/delivery)\n        return regularSEOType;\n    }\n    getSignature() {\n        if (this.signature) {\n            return `s--${this.signature}--`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n    createCloudinaryURL(transformation, trackedAnalytics) {\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\n        if (!this.publicID) {\n            return '';\n        }\n        // Throws if some options are mis-configured\n        // See the function for more information on when it throws\n        this.validateAssetForURLCreation();\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n        const transformationString = transformation ? transformation.toString() : '';\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n        const publicID = this.publicID;\n        if (typeof transformation === 'string') {\n            const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID.replace(/,/g, '%2C'), this.suffix]\n                .filter((a) => a)\n                .join('/');\n            return url;\n        }\n        else {\n            // Avoid applying encodeURI on entire string in case where we have transformations with comma (i.e. f_auto,q_auto)\n            // Since encodeURI does not encode commas we replace commas *only* on the publicID\n            const safeURL = [\n                encodeURI(prefix),\n                this.getResourceType(),\n                this.getSignature(),\n                encodeURI(transformationString),\n                version,\n                encodeURI(publicID).replace(/,/g, '%2C'),\n                this.suffix && encodeURI(this.suffix)\n            ]\n                .filter((a) => a)\n                .join('/')\n                .replace(/\\?/g, '%3F')\n                .replace(/=/g, '%3D');\n            const shouldAddAnalytics = this.urlConfig.analytics !== false && !(publicID.includes('?'));\n            let queryParamsString = '';\n            if (typeof (this.urlConfig.queryParams) === 'object') {\n                try {\n                    const queryParams = new URLSearchParams(this.urlConfig.queryParams);\n                    if (shouldAddAnalytics) {\n                        queryParams.set(\"_a\", getSDKAnalyticsSignature(trackedAnalytics));\n                    }\n                    queryParamsString = queryParams.toString();\n                }\n                catch (err) {\n                    console.error('Error: URLSearchParams is not available so the queryParams object cannot be parsed, please try passing as an already parsed string');\n                }\n            }\n            else {\n                queryParamsString = this.urlConfig.queryParams || '';\n                if (shouldAddAnalytics) {\n                    queryParamsString += `${(queryParamsString.length > 0 ? '&' : '')}_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n                }\n            }\n            if (queryParamsString) {\n                return `${safeURL}?${queryParamsString}`;\n            }\n            else {\n                return safeURL;\n            }\n        }\n    }\n}\nexport { CloudinaryFile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}